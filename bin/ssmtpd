#!/usr/bin/env jit.go

/** 
ssmtpd: This code is based on Go-Guerrilla SMTPd Version 1.1, but heavily
modified towards the needs of the kinko.me email crypto package. 
Find Go-Guerrilla's License statement below.

Changes:

- An email will no longer be put into a redis database, but instead be 
  passed on to a filter program. Depending on that filter's return value
  the email will be accepted or rejected.
- No nginx integration
- No configuration file - all configuration is passed on via command line.
- Users are authenticated against the accounts.db sqlite3 database.

To run install the jit package from github.com/radiospiel/jit.

*/

/** 
Go-Guerrilla SMTPd
A minimalist SMTP server written in Go, made for receiving large volumes of mail.
Works either as a stand-alone or in conjunction with Nginx SMTP proxy.
TO DO: add http server for nginx

Copyright (c) 2012 Flashmob, GuerrillaMail.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

package main

import (
	"bufio"
	"bytes"
	"crypto/tls"
	"encoding/base64"
	"errors"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"os/exec"
	"log"
	"net"
	"os"
	"runtime"
	"strconv"
	"strings"
	"time"
)

const GSMTP_MAX_SIZE	=  20971520	 // The maximum size of an email
var GSMTP_HOST_NAME		=  "server.example.com" // hostname for (HELO,EHLO)
const GSMTP_TIMEOUT		=	100		 // how many seconds before timeout.
const GM_MAX_CLIENTS	=	500		 // max number of clients
var GSTMP_AUTHENTICATE	=	 ""		 // command to authenticate
var GSTMP_PROCESS		=	 ""		 // command to process email
var GSMTP_PUB_KEY		=	 ""		 // TLS certificate
var GSMTP_PRV_KEY		=	 ""		 // TLS key
var GSMTP_VERBOSE		=	false	 // verbose operation?
var GSMTP_TLS			=   "strict" // TLS mode: "strict", "optional", "ssl"

/*
 * internal global values
 */

var gstmp_listen_interface string		   // interface to listen to.
var gstmp_timeout time.Duration			   // timeout.
var gstmp_sem chan int					   // currently active clients.
var gstmp_save_mail_chan chan *Client	   // workers for processing mail.

/* -- a client ------------------------------------------------------------- */

type Client struct {
	clientId	int64			// id of client connection.
	tls_on		bool			// set after switched to TLS
	conn		net.Conn
	bufin		*bufio.Reader
	bufout		*bufio.Writer
}

const fatal = 0
const fail = 1
const warn = 2
const info = 3 

func Log(level int, s string) {
	switch level {
		case fatal: 		log.Fatalf(s);
		case fail, warn:	log.Println(s);
		default: 			if GSMTP_VERBOSE { log.Println(s); }
	}
}

func CheckError(err error) {
	if err != nil { panic(err) }
}

func ParseArguments() {
	log.SetOutput(os.Stderr)

	// -- parse command line arguments ----------------------------------------

	var port string

	flag.StringVar(&port,				"port",			"2525",					"port to listen on, eg. 2525")
	flag.StringVar(&GSMTP_PRV_KEY,		"ssl-key",		"",						"The SSL key")
	flag.StringVar(&GSMTP_PUB_KEY,		"ssl-cert",		"",						"The SSL cert")
	flag.StringVar(&GSTMP_AUTHENTICATE, "auth",			"",						"authenticate command")
	flag.StringVar(&GSTMP_PROCESS,		"process",		"",						"process command")
	flag.StringVar(&GSMTP_HOST_NAME,	"hostname",		"server.example.com",	"The STMP hostname")
	flag.BoolVar(&GSMTP_VERBOSE,		"verbose",		false,					"verbose operation")
	flag.StringVar(&GSMTP_TLS, 			"tls", 			"strict",				"TLS mode: strict, ssl, optional")
	flag.Parse()

	// -- initialize internal data

	gstmp_listen_interface = "0.0.0.0:" + port

	gstmp_sem = make(chan int, GM_MAX_CLIENTS)
	gstmp_save_mail_chan = make(chan *Client, 5)
	gstmp_timeout = time.Duration(GSMTP_TIMEOUT) * time.Second

	if GSMTP_PUB_KEY == "" || GSMTP_PRV_KEY == "" {
		Log(fatal, "Missing -ssl-key or -ssl-cert arguments")
	}
}

/*
 * Build TLS configuration.
 */
var _tls_config *tls.Config

func TlsConfig() (*tls.Config) {
	if _tls_config == nil {
		cert, err := tls.LoadX509KeyPair(GSMTP_PUB_KEY, GSMTP_PRV_KEY)
		if err != nil {
			Log(fatal, fmt.Sprintf("There was a problem with loading the certificate: %s", err))
		}
		_tls_config = &tls.Config{Certificates: []tls.Certificate{cert}, 
									ClientAuth: tls.VerifyClientCertIfGiven, 
									ServerName: GSMTP_HOST_NAME}
	}
	
	return _tls_config;
}

func Listen(iface string) (listener net.Listener) {
	var err error

	if GSMTP_TLS == "ssl" {
		listener, err = tls.Listen("tcp", iface, TlsConfig())
	} else {
		listener, err = net.Listen("tcp", iface)
	}

	if err != nil {
		Log(fatal, fmt.Sprintf("Cannot listen on %s: %v", iface, err))
	}

	return listener;
}

func main() {
	ParseArguments()

	// Start listening for SMTP connections
	listener := Listen(gstmp_listen_interface);
	Log(warn, fmt.Sprintf("Listening on tcp %s (tls: %s)", gstmp_listen_interface, GSMTP_TLS))

	var clientId int64 = 1
	for {
		conn, err := listener.Accept()
		if err != nil {
			Log(warn, fmt.Sprintf("Accept error: %s", err))
			continue
		}
		Log(info, "Currently " +strconv.Itoa(runtime.NumGoroutine())+ " serving goroutines")
		gstmp_sem <- 1 // Wait for active queue to drain.
		go handleClient(&Client{
			tls_on:			GSMTP_TLS == "ssl",
			conn:			conn,
			bufin:			bufio.NewReader(conn),
			bufout:			bufio.NewWriter(conn),
			clientId:		clientId,
		})
		clientId++
	}
}

func handleClient(client *Client) {
	starts_at := time.Now()

	var helo string					// helo as sent from client
	var authenticated_user string	// username after successful authentication
	var mail_from string			// FROM via SMTP protocol
	var rcpt_to string				// RCPT via SMTP protocol

	reset := func() {
		mail_from = ""
		rcpt_to = ""
	}

	remote_addr, _, _ := net.SplitHostPort(client.conn.RemoteAddr().String())

	// client logging
	CLog := func(level int, msg string) {
		duration := time.Now().Sub(starts_at)
		msg = fmt.Sprintf("%s (+%d msecs)", msg, (int)(duration / time.Millisecond))
		if mail_from != "" && rcpt_to != "" {
			msg = fmt.Sprintf("%s -> %s: %s", mail_from, rcpt_to, msg)
		}
		if level == fail {
			msg = fmt.Sprintf("FAIL: %s", msg)
		}
		if authenticated_user == "" {
			msg = fmt.Sprintf("#%d: %s", client.clientId, msg)
		} else {
			msg = fmt.Sprintf("#%d (%s): %s", client.clientId, authenticated_user, msg)
		}
		Log(level, msg)
	}
	
	CLog(info, fmt.Sprintf("Connected from %s", remote_addr))

	defer func() {
		reset()
		CLog(warn, fmt.Sprintf("Disconnecting"))
		client.conn.Close()
		<-gstmp_sem // Done; enable next client to run.
	}()

	defer func() {
		err := recover()
		switch {
		case err == nil:
			;
		case err == io.EOF:
			CLog(warn, fmt.Sprintf("Client closed connection: %v", err))
		default:
			neterr, ok := err.(net.Error);
			if ok && neterr.Timeout() {
				CLog(warn, fmt.Sprintf("Client timed out: %v", err))
			} else {
				CLog(warn, fmt.Sprintf("Client IO error: %v", err))
			}
		}
	}()

	/*
	 * add CRLF to response and flush to client
	 */
	response := func(line string) {
		data := line + "\r\n"
		for data != "" {
			client.conn.SetDeadline(time.Now().Add(gstmp_timeout))
			size, err := client.bufout.WriteString(data)
			CheckError(err)
			client.bufout.Flush()
			data = data[size:]
		}
	}

	/*
	 * [todo] readUntil only works if suffix ends in '\n'
	 * [todo] limit length of string to be read during ReadString
	 */
	readUntil := func(suffix string) (string) {
		input := ""

		for ! strings.HasSuffix(input, suffix) {
			client.conn.SetDeadline(time.Now().Add(gstmp_timeout))
			reply, err := client.bufin.ReadString('\n')
			CheckError(err)

			if reply != "" {
				input = input + reply
				if len(input) > GSMTP_MAX_SIZE {
					err = errors.New("Maximum DATA size exceeded (" + strconv.Itoa(GSMTP_MAX_SIZE) + ")")
				}
			}
		}
		return input
	}

	const AUTHENTICATED = 0
	const TLS_OFF = 1
	const TLS_ON = 2 

	requires := func(check int) (bool) {
		switch {
			case check == AUTHENTICATED && authenticated_user == "":
				response("530 NOT ALLOWED"); return false
			case check == TLS_OFF && client.tls_on:
				response("530 NOT ALLOWED, TLS is already enabled"); return false
			case check == TLS_ON && !client.tls_on && GSMTP_TLS != "optional":
				response("530 NOT ALLOWED, must STARTTLS"); return false
		}
		
		return true
	}

	client_errors := 0		// number of errors in this connection
	done := false			// set to true to close session.
	
	goodbye := func(msg string) {
		response(msg)
		done = true
	}

	/*
	 * parse SMTP COMMANDS.
	 */

	COMMANDS := make(map[string](func(string)))
	COMMANDS["HELO"] = func(arg string) {
		helo = arg
		response("250 "+ GSMTP_HOST_NAME +" Hello ")
	}

	COMMANDS["EHLO"] = func(arg string) {
		helo = arg

		msg := "250-"+ GSMTP_HOST_NAME +" Hello "+helo+"["+remote_addr+"]"+"\r\n"
		msg += "250-SIZE "+ strconv.Itoa(GSMTP_MAX_SIZE) +"\r\n"
		if ! client.tls_on {
			msg += "250-STARTTLS\r\n"
		}
		msg += "250-AUTH PLAIN LOGIN\r\n"
		msg += "250 HELP "
		response(msg)
	}

	COMMANDS["NOOP"] = func(arg string) {
		response("250 OK")
	}

	COMMANDS["RSET"] = func(arg string) {
		reset()
		response("250 OK")
	}

	COMMANDS["QUIT"] = func(arg string) {
		goodbye("221 Bye")
	}

	/*
	 * upgrade to TLS
	 */
	COMMANDS["STARTTLS"] = func(arg string) {
		if ! requires(TLS_OFF) {
			return
		}

		response("220 Ready to start TLS")

		tlsConn := tls.Server(client.conn, TlsConfig())
		CheckError(tlsConn.Handshake())

		client.conn = net.Conn(tlsConn)
		client.bufin = bufio.NewReader(client.conn)
		client.bufout = bufio.NewWriter(client.conn)
		client.tls_on = true
	}

	/*
	 * authentication 
	 */
	authenticate := func(mode string, username string, password string) {
		if AuthenticateUser(username, password) {
			authenticated_user = username
			CLog(warn, fmt.Sprintf("%s: authenticated from %s", mode, remote_addr))
			response("235 ok, go ahead")
		} else {
			CLog(fail, fmt.Sprintf("%s: %s failed for %s from %s", mode, GSTMP_AUTHENTICATE, username, remote_addr))
			response("530 NOT ALLOWED")
		}
	}

	COMMANDS["AUTH PLAIN "] = func(arg string) { // note space at end!
		if ! requires(TLS_ON) {
			return
		}

		parts := strings.SplitN(FromBase64(arg), "\x00", 3)
		username, password := parts[1], parts[2]
		authenticate("PLAIN", username, password)
	}

	COMMANDS["AUTH LOGIN"] = func(arg string) {
		if ! requires(TLS_ON) {
			return
		}

		readAndDecodeBase64 := func() (string) {
			input := readUntil("\r\n")
			trimmed := strings.Trim(input, " \n\r")
			return FromBase64(trimmed)
		}

		response("334 VXNlcm5hbWU6")
		username := readAndDecodeBase64()

		response("334 UGFzc3dvcmQ6")
		password := readAndDecodeBase64()
		authenticate("LOGIN", username, password)
	}

	/*
	 * email control
	 */ 
	COMMANDS["MAIL FROM:"] = func(arg string) {
		if ! requires(AUTHENTICATED) {
			return
		}

		mail_from = strings.Trim(arg, "<>")
		response("250 Ok")
	}

	COMMANDS["RCPT TO:"] = func(arg string) {
		if ! requires(AUTHENTICATED) {
			return
		}

		// [todo] allow multiple recipients
		rcpt_to = strings.Trim(arg, "<>")
		response("250 Accepted")
	}

	COMMANDS["DATA"] = func(arg string) {
		if ! requires(AUTHENTICATED) {
			return
		}

		response("354 Enter message, ending with \".\" on a line by itself")

		// [todo] add timeout handling, limit input size
		data := readUntil("\r\n.\r\n")
		CLog(info, fmt.Sprintf("sent %d byte for %s from %s)", len(data)))

		message, err := ProcessMail(data, authenticated_user)
		if err == nil {
			CLog(warn, fmt.Sprintf("processed %d byte: %s", len(data), message))
			response("250 OK: " + message)
		} else {
			CLog(fail, fmt.Sprintf("processing %d byte: %s/%s", len(data), err, message))
			response("554 Error: " + message)
		}
	}

	lookupSmtpCommand := func(input string) (func(string), string) {
		upcase := strings.ToUpper(input)
		for cmd, handler := range COMMANDS {
			if strings.Index(upcase, cmd) == 0 {
				arg := input[len(cmd):]
				return handler, arg
			}
		}

		unrecognized := func(arg string) {
			client_errors++
			if client_errors > 3 {
				goodbye("500 Too many unrecognized COMMANDS")
			} else {
				response("500 unrecognized command")
			}
		}

		return unrecognized, ""
	}
	
	/*
	 * start SMTP session.
	 */
	response(fmt.Sprintf("220 %s SMTP kinko.smtpd"))

	/* up to 99 COMMANDS in a single session. */
	for i := 0; i < 99; i++ {
		input := readUntil("\r\n")
		input = strings.Trim(input, " \n\r")

		cmd, arg := lookupSmtpCommand(input)
		cmd(arg)
		
		if done {
			break;
		}
	}
}

func AuthenticateUser(username string, password string) bool {
	cmd := exec.Command(GSTMP_AUTHENTICATE)
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout

	os.Setenv("SSMTPD_USERNAME", username)
	os.Setenv("SSMTPD_PASSWORD", password)

	defer func() {
		os.Setenv("SSMTPD_USERNAME", "")
		os.Setenv("SSMTPD_PASSWORD", "")
	}()

	err := cmd.Run()
	return err == nil
}

func FirstLine(buf bytes.Buffer) string {
	scanner := bufio.NewScanner(bytes.NewReader(buf.Bytes()))
	for scanner.Scan() {
		return scanner.Text()
	}
	
	return ""
}

func FromBase64(data string) string {
	buf := bytes.NewBufferString(data)
	decoder := base64.NewDecoder(base64.StdEncoding, buf)
	res, _ := ioutil.ReadAll(decoder)
	return string(res)
}

// [todo] add timeout handling.
func ProcessMail(data string, authenticated_user string)(string, error) {
	if(GSTMP_PROCESS == "") {
		return fmt.Sprintf("received %d byte", len(data)), nil
	}

	cmd := exec.Command(GSTMP_PROCESS, authenticated_user)
	cmd.Stdin = strings.NewReader(data)
	cmd.Stderr = os.Stderr

	var out bytes.Buffer
	cmd.Stdout = &out
	err := cmd.Run()
	
	// cmd.Run might return an error even if the process finished successfully,
	// for example when running a process command which succeeds before reading
	// the entire email. This is supported, and we use that case in our tests.
	// (whether or not that makes sense is a different matter.)
	if err != nil && cmd.ProcessState != nil && cmd.ProcessState.Success() {
		Log(warn, fmt.Sprintf("%s: ignoring error %v", GSTMP_PROCESS, err))
		err = nil
	}

	message := FirstLine(out)
	switch {
		case message != "": 	return message, err
		case err != nil: 		return "Unknown error", err
		default: 				return "Success", err
	}
}
